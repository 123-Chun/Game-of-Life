/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	describe('The rules', function(){
		var population = __webpack_require__(2)().population;

		it('Underpopulation: Any live cell with fewer than two live neighbours dies, as if caused by population.', function (){
			expect(population(0,0)).toBe(0);
			expect(population(0,1)).toBe(0);
			expect(population(0,2)).toBe(0);
			expect(population(1,0)).toBe(0);
			expect(population(1,1)).toBe(0);
			expect(population(1,2)).toBe(1);
		});

		
	});

	describe('Scenario 1: Underpopulation', function(){
		var population = __webpack_require__(2)().population;

		it('Underpopulation: Given a game of life, when a live cell has fewer than two neighbours; then this cell dies', function (){
			expect(population(0,0)).toBe(0);
			expect(population(0,1)).toBe(0);
			expect(population(0,2)).toBe(0);
			expect(population(1,0)).toBe(0);
			expect(population(1,1)).toBe(0);
			expect(population(1,2)).toBe(1);
		});
	});

	describe('Scenario 2: Overcrowding', function(){
		var population = __webpack_require__(2)().population;

		it('Overcrowding: Given a game of life, when a live cell has more than three neighbours; then this cell dies.', function (){
			expect(population(1,3)).toBe(1);
			expect(population(1,4)).toBe(0);
			expect(population(1,5)).toBe(0);
			expect(population(1,10)).toBe(0);
			expect(population(1,100)).toBe(0);
		});
	});

	describe('Scenario 3: Survival', function(){
		var population = __webpack_require__(2)().population;
		
		it('Survival: Given a game of life, When a live cell has two or three neighbours; then this cell stays alive.', function (){
			expect(population(1,1)).toBe(0);
			expect(population(1,2)).toBe(1);
			expect(population(1,3)).toBe(1);
			expect(population(1,4)).toBe(0);
		});
	});

	describe('Scenario 4: Creation of Life', function(){
		var population = __webpack_require__(2)().population;
		
		it('Creation of Life: When an empty position has exactly three neighbouring cells; then a cell is created in this position.', function (){
			expect(population(0,3)).toBe(1);
		});
	});

	describe('Scenario 5: Grid with no live cells', function(){
		var population = __webpack_require__(2)().population;
		
		it('Grid with no live cells: Given a game of life with the initial state containing no live cells; when the game evolves one turn; then the next state also contains no live cells', function (){
			expect(population(0,0)).toBe(0);
		});
	});

	describe('Scenario 6: Expected game outcome for seeded grid', function (){
		var evolve = __webpack_require__(2)().evolve;

		it('Given a game of life with the initial stateâ€¦', function(){
			var initialState = [
				[0,0,0],
				[0,1,0],
				[0,0,0]
			];

			var resultState = [
				[0,0,0],
				[0,0,0],
				[0,0,0]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});
	});

	describe('Game', function (){
		var evolve = __webpack_require__(2)().evolve;

		it('can perform a simple evolution', function(){
			var initialState = [
				[0,0,0],
				[0,1,0],
				[0,0,0]
			];

			var resultState = [
				[0,0,0],
				[0,0,0],
				[0,0,0]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});
	});


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = function()
	{
		function population(cellState, numberOfLiveNeighbours)
		{
			if (cellState == 0)
			{
				if ( numberOfLiveNeighbours == 3 )
				{
					return 1;
				}

				return 0;
			}

			if (cellState == 1)
			{
				if ( numberOfLiveNeighbours < 2 || numberOfLiveNeighbours > 3)
				{
					return 0;
				}

				return 1;
			}

			return 0;
		}

		function evolve(gridState)
		{
			var newState = [
					[0,0,0],
					[0,0,0],
					[0,0,0]
				];

			if ( gridState == [
				[0,0,0],
				[0,1,0],
				[0,0,0]
			])
			{
				newState = [
					[0,0,0],
					[0,0,0],
					[0,0,0]
				];
			};

			return newState;
		}

		return {
			population: population,
			evolve: evolve
		};
	};

/***/ }
/******/ ]);