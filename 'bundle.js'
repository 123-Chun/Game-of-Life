/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	describe('Scenario 1: Underpopulation', function(){
		var Cell = __webpack_require__(2);
		var cell = new Cell();

		it('Underpopulation: Any live cell with fewer than two live neighbours dies, as if caused by cell.', function (){

			cell.setState(0);
			cell.setLiveNeighbours(0);
			expect(cell.newCellState()).toBe(0);

			cell.setState(0);
			cell.setLiveNeighbours(1);
			expect(cell.newCellState()).toBe(0);

			cell.setState(0);
			cell.setLiveNeighbours(2);
			expect(cell.newCellState()).toBe(0);

			cell.setState(1);
			cell.setLiveNeighbours(0);
			expect(cell.newCellState()).toBe(0);

			cell.setState(1);
			cell.setLiveNeighbours(1);
			expect(cell.newCellState()).toBe(0);

			cell.setState(1);
			cell.setLiveNeighbours(2);
			expect(cell.newCellState()).toBe(1);
		});

		
	});

	describe('Scenario 2: Overcrowding', function(){
		var Cell = __webpack_require__(2);
		var cell = new Cell();

		it('Overcrowding: Given a game of life, when a live cell has more than three neighbours; then this cell dies.', function (){

			cell.setState(1);
			cell.setLiveNeighbours(3);
			expect(cell.newCellState()).toBe(1);

			cell.setState(1);
			cell.setLiveNeighbours(4);
			expect(cell.newCellState()).toBe(0);

			cell.setState(1);
			cell.setLiveNeighbours(5);
			expect(cell.newCellState()).toBe(0);

			cell.setState(1);
			cell.setLiveNeighbours(10);
			expect(cell.newCellState()).toBe(0);

			cell.setState(1);
			cell.setLiveNeighbours(100);
			expect(cell.newCellState()).toBe(0);
		});
	});

	describe('Scenario 3: Survival', function(){
		var Cell = __webpack_require__(2);
		var cell = new Cell();
		
		it('Survival: Given a game of life, When a live cell has two or three neighbours; then this cell stays alive.', function (){

			cell.setState(1);
			cell.setLiveNeighbours(2);
			expect(cell.newCellState()).toBe(1);

			cell.setState(1);
			cell.setLiveNeighbours(3);
			expect(cell.newCellState()).toBe(1);
		});
	});

	describe('Scenario 4: Creation of Life', function(){
		var Cell = __webpack_require__(2);
		var cell = new Cell();
		
		it('Creation of Life: When an empty position has exactly three neighbouring cells; then a cell is created in this position.', function (){
			cell.setState(0);
			cell.setLiveNeighbours(3);
			expect(cell.newCellState()).toBe(1);
		});
	});

	describe('Scenario 5: Grid with no live cells', function(){
		var Cell = __webpack_require__(2);
		var cell = new Cell();
		
		it('Grid with no live cells: Given a game of life with the initial state containing no live cells; when the game evolves one turn; then the next state also contains no live cells', function (){
			cell.setState(0);
			cell.setLiveNeighbours(0);
			expect(cell.newCellState()).toBe(0);
		});
	});

	describe('Scenario 6: Expected game outcome for seeded grid', function (){
		var Grid = __webpack_require__(3);
		var grid = new Grid();

		it('Given a game of life with the initial stateâ€¦', function(){
			var initialState = [
				[0,0,0],
				[0,1,0],
				[0,0,0]
			];

			var resultState = [
				[0,0,0],
				[0,0,0],
				[0,0,0]
			];

			grid.setState(initialState);
			grid.updateState()
			expect(grid.getGrid()).toEqual(resultState);
		});
	});

	describe('Game', function (){
		var Grid = __webpack_require__(3);
		var grid = new Grid();

		it('can perform a simple evolution', function(){
			var initialState = [
				[0,1,0],
				[0,1,0],
				[0,1,0]
			];

			var resultState = [
				[0,0,0],
				[1,1,1],
				[0,0,0]
			];

			grid.setState(initialState);
			grid.updateState()
			expect(grid.getGrid()).toEqual(resultState);
		});
	});


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = function Cell(){
		
		this.currentState = 0;
		this.newState = 0;
		this.currentLiveNeighbours = 0;

		/**
		 * Sets the state of the cell
		 * @param {int} initialState 0 = dead, 1= alive
		 */
		this.setState = function(initialState){
			
			this.currentState = initialState;
			this.newState = initialState;
		}

		this.setLiveNeighbours = function(neighbours){
			
			this.currentLiveNeighbours = neighbours;
		}

		this.getState = function () {
			return this.currentState;
		}

		/**
		 * Updates and returns new cell state
		 * @param  {int} cellState               0 = dead, 1= alive;
		 * @param  {int} numberOfLiveNeighbours
		 * @return {int} updated state of object
		 */
		this.getNewState = function(cellState, numberOfLiveNeighbours){

			return this.newState;
		}

		this.updateNewState = function(numberOfLiveNeighbours){
			
			this.currentLiveNeighbours = numberOfLiveNeighbours;

			newState = this.newCellState();

			// console.log("Cell New State");
			this.newState = newState;
		}

		this.updateState = function(){
			// console.log("Cell Updated");
			this.currentState = this.newState;
		}

		/**
		 * Calculates the new state of the cell depending number of live neighbouring cells
		 * @return {int} 0 = dead, 1 = alive
		 */
		this.newCellState = function()
		{
			if (this.currentState == 0)
			{
				if ( this.currentLiveNeighbours == 3 )
				{
					return 1;
				}

				return 0;
			}

			if (this.currentState == 1)
			{
				if ( this.currentLiveNeighbours < 2 || this.currentLiveNeighbours > 3)
				{
					return 0;
				}

				return 1;
			}

			return 0;
		}
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function Grid(){
		
		var Cell = __webpack_require__(4)	;

		this.liveCells = [];
		this.grid = [];
		this.newGrid = [];
		this.gridSize = 0;

		/**
		 * Draws grid
		 * @param  {[type]} gridSize [description]
		 * @return {[type]}          [description]
		 */
		this.drawGrid = function(gridSize)
		{
			this.gridSize = gridSize;

			for ( var x = 0; x < this.gridSize; x++)
			{
				this.grid[x] = [x];

				for (var y = 0; y < this.gridSize; y++)
				{
					var rand = Math.floor(Math.random() * 4) + 1;
					if (rand > 2)
					{
						this.grid[x][y] = new Cell().setState(0);
					}
					else
					{
						this.grid[x][y] = new Cell().setState(1);
						this.liveCells.push([x,y]);
					};
				};
			}
		}

		/**
		 * Sets grid state
		 * @param {[type]} gridState [description]
		 */
		this.setState = function(gridState)
		{
			for (var x = 0; x < gridState.length; x++) {
				for (var y = 0; y < gridState.length; y++) {
					var state = gridState[x][y];
					gridState[x][y] = new Cell();
					gridState[x][y].setState(state);
				};
			};

			this.grid = gridState;
			this.gridSize = gridState.length;
			this.findLiveCells();
		}

		this.getGrid = function() {
			var plainGrid = [];

			for (var x = 0; x < this.grid.length; x++) {
				
				plainGrid[x] = [];

				for (var y = 0; y < this.grid.length; y++) {
				
					plainGrid[x].push(this.grid[x][y].newState);
				
				};

			};

			return plainGrid;
		}

		/**
		 * Updates the state of the grid
		 * @return {[type]} [description]
		 */
		this.updateState = function()
		{
			
			// Copy grid without references:
			this.newGrid = this.grid.map(function(arr) {
			    return arr.slice();
			});

			if (this.liveCells.length > 2) {
				
				this.updateAllCellStates(true);
			}
			else {
				
				this.updateLiveCellsOnly();
			}

			this.updateAllCellStates(false);

			this.grid = this.newGrid.slice(0);
			console.log("New State:");
		}

		this.updateAllCellStates = function(state){

			for ( var x = 0; x < this.gridSize; x++)
			{
				for (var y = 0; y < this.gridSize; y++)
				{
					var cell = this.newGrid[x][y];
					if (state == true) {
						var liveNeighbours = this.checkNeighbours(x,y);
						cell.updateNewState(liveNeighbours);
					}else{
						cell.updateState();
					};
				};
			}
		}

		this.updateLiveCellsOnly = function() {

			for (var i = 0; i < this.liveCells.length; i++)
			{
				var x = this.liveCells[i][0];
				var y = this.liveCells[i][1];
				// console.log(x+","+y)
				var cell = this.newGrid[x][y];

				var liveNeighbours = this.checkNeighbours(x,y);

				cell.updateNewState(liveNeighbours);
			};
		}

		/**
		 * Checks for all the live cells on the grid
		 * @return {int} number of live cells on grid
		 */
		this.findLiveCells = function() {

			for ( var x = 0; x < this.gridSize; x++)
			{
				for (var y = 0; y < this.gridSize; y++)
				{
					var cell = this.grid[x][y].getState();
					if (cell == 1)
					{
						this.liveCells.push([x,y]);
					};
				};
			}
		}

		/**
		 * Checks if surrounding cells are alive
		 * @param  {int} x position
		 * @param  {int} y position
		 * @return {int}   number of cells alive around this cell
		 */
		this.checkNeighbours = function(x,y) {

			var liveNeighbours = 0;

			liveNeighbours = liveNeighbours + this.getCellState(x-1,y-1);
			liveNeighbours = liveNeighbours + this.getCellState(x-1,y);
			liveNeighbours = liveNeighbours + this.getCellState(x-1,y+1);

			liveNeighbours = liveNeighbours + this.getCellState(x,y-1);
			liveNeighbours = liveNeighbours + this.getCellState(x,y+1);

			liveNeighbours = liveNeighbours + this.getCellState(x+1,y-1);
			liveNeighbours = liveNeighbours + this.getCellState(x+1,y);
			liveNeighbours = liveNeighbours + this.getCellState(x+1,y+1);
			// console.log("Cell: "+x+","+y+" Neigh: "+liveNeighbours+"\n" );
			return liveNeighbours;
		}

		/**
		 * Gets state of specified cell
		 * @param  {int} x [description]
		 * @param  {int} y [description]
		 * @return {int}   [description]
		 */
		this.getCellState = function(x,y) {

			if (x >= 0 && y >= 0) {

				if (x < this.gridSize && y < this.gridSize) {

					// console.log(x+","+y+" = "+this.grid[x][y].currentState)
					return this.grid[x][y].getState();
				};
			};

			return 0;
		}

		/**
		 * Prints each line of the grid
		 */
		this.printGrid = function() {

			for (var x = 0; x < this.grid.length; x++) {
				
				var row = [];

				for (var y = 0; y < this.grid.length; y++) {
				
					row.push(this.grid[x][y].newState);
				
				};

				console.log(row);
			};
		}
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = function Cell(){
		
		this.currentState = 0;
		this.newState = 0;
		this.currentLiveNeighbours = 0;

		/**
		 * Sets the state of the cell
		 * @param {int} initialState 0 = dead, 1= alive
		 */
		this.setState = function(initialState){
			
			this.currentState = initialState;
			this.newState = initialState;
		}

		this.setLiveNeighbours = function(neighbours){
			
			this.currentLiveNeighbours = neighbours;
		}

		this.getState = function () {
			return this.currentState;
		}

		/**
		 * Updates and returns new cell state
		 * @param  {int} cellState               0 = dead, 1= alive;
		 * @param  {int} numberOfLiveNeighbours
		 * @return {int} updated state of object
		 */
		this.getNewState = function(cellState, numberOfLiveNeighbours){

			return this.newState;
		}

		this.updateNewState = function(numberOfLiveNeighbours){
			
			this.currentLiveNeighbours = numberOfLiveNeighbours;

			newState = this.newCellState();

			// console.log("Cell New State");
			this.newState = newState;
		}

		this.updateState = function(){
			// console.log("Cell Updated");
			this.currentState = this.newState;
		}

		/**
		 * Calculates the new state of the cell depending number of live neighbouring cells
		 * @return {int} 0 = dead, 1 = alive
		 */
		this.newCellState = function()
		{
			if (this.currentState == 0)
			{
				if ( this.currentLiveNeighbours == 3 )
				{
					return 1;
				}

				return 0;
			}

			if (this.currentState == 1)
			{
				if ( this.currentLiveNeighbours < 2 || this.currentLiveNeighbours > 3)
				{
					return 0;
				}

				return 1;
			}

			return 0;
		}
	};

/***/ }
/******/ ]);